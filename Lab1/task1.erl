% 1. Задайте функцию seconds(Hours, Minutes, Seconds), вычисляющую, сколько
% секунд прошло с начала дня по заданному времени (даны число часов, минут и
% секунд).
% seconds(1, 2, 1) => 3721 (время 1:02:01)
% 2. Задайте функцию min(List), возвращающую минимальный элемент списка List.
% В случае пустого списка она должна выкидывать исключение.
% min([6,1,4]) => 1
% 3. Задайте функцию distinct(List), возвращающую true, если все элементы списка
% List различаются (и false, если нет).
% distinct([4,2,a,false]) => true
% distinct([1,2,2,3]) => false
% 4. Задайте функцию split_all(List, N), разбивающую список на части длиной N
% каждая (возможно, кроме последней).
% split_all([1, 2, 3, 4, 5], 3) => [[1, 2, 3], [4, 5]]
% 5. Задайте функцию sublist(List, N, M), возвращающую отрезок списка List с N-ого
% по M-ый элемент (нумерация начинается с первого).
% sublist([1, 3, 4, 5, 6], [2, 4]) => [3, 4, 5] 
% 6. Задайте функцию intersect(List1, List2), находящую все общие элементы двух списков
% List1 и List2.
% intersect([1, 3, 2, 5], [2, 3, 4]) => [3, 2] (или [2, 3]).
% intersect([1, 6, 5], [2, 3, 4]) => [].
% 7. Задайте функцию is_date(DayOfMonth, MonthOfYear, Year), определяющуе номер дня
% недели по числу месяца, номеру месяца и году.
% Напомню, что год является високосным, если он либо делится на 4, но не на 100, либо
% делится на 400.
% В качестве точки отсчёта возьмите 1 января 2000 года (суббота). Не используйте каких-то
% формул для нахождения дня недели, это задание на рекурсию!
% is_date(1, 1, 2000) => 6
% is_date(1, 2, 2013) => 5 


-module(task1).
-export([seconds/3]).

seconds(Hours, Mins, Secs) ->
  Hours * 60 * 60 + Mins * 60 + Secs.