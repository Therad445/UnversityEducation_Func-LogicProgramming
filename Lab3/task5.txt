Итоговая алгоритмическая сложность каждой реализации мультимножества будет следующей:

### Реализация с использованием `maps` (task3):

1. **Добавление элемента (`add/2`), Удаление элемента (`remove/2`), Подсчет количества вхождений элемента (`count/2`):**
   - O(1) в среднем случае (амортизированное время).

2. **Получение всех элементов (`elements/1`):**
   - O(n), где n - количество элементов в мультимножестве.

3. **Объединение мультимножеств (`union/2`):**
   - O((n1 + n2) * m), где n1 и n2 - количество элементов в объединяемых мультимножествах, а m - максимальная кратность элемента в объединенном мультимножестве.

### Реализация с использованием списка пар (task4):

1. **Добавление элемента (`add/2`):**
   - O(1).

2. **Удаление элемента (`remove/2`), Подсчет количества вхождений элемента (`count/2`):**
   - O(n), где n - количество элементов в мультимножестве (так как требуется проход по всему списку).

3. **Получение всех элементов (`elements/1`):**
   - O(n), где n - количество элементов в мультимножестве.

4. **Объединение мультимножеств (`union/2`):**
   - O((n1 + n2)^2), где n1 и n2 - количество элементов в объединяемых мультимножествах.

Таким образом, в среднем случае реализация с использованием `maps` имеет более эффективное время выполнения для всех операций, кроме получения всех элементов, где сложность одинакова для обеих реализаций.